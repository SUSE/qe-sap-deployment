---
- name: Get cluster status
  ansible.builtin.command: crm configure show
  register: crm_conf_show
  changed_when: false

- name: Set crm facts
  ansible.builtin.set_fact:
    crm_maintenance_mode: "{{ (crm_conf_show.stdout | regex_search('maintenance-mode=([a-z]*)', '\\1'))[0] }}"
    stonith_enabled: "{{ (crm_conf_show.stdout | regex_search('stonith-enabled=([a-z]*)', '\\1'))[0] | default('false') }}"
    hana_topology_clone: "{{ crm_conf_show.stdout | regex_search('clone cln_SAPHanaTopology') }}"
    stonith_timeout: "{{ crm_conf_show.stdout | regex_search('stonith-timeout') }}"  # this should be variable!
    hana_topology_resource: "{{ crm_conf_show.stdout | regex_search('primitive rsc_SAPHanaTopology') }}"
    hana_resource_clone: "{{ crm_conf_show.stdout | regex_search('ms msl_SAPHana_') }}"
    hana_resource: "{{ crm_conf_show.stdout | regex_search('primitive rsc_SAPHana_') }}"
    ip_resource: "{{ crm_conf_show.stdout | regex_search('primitive rsc_ip_') }}"
    ip_nc: "{{ crm_conf_show.stdout | regex_search('primitive rsc_socat_') }}"
    ip_grp: "{{ crm_conf_show.stdout | regex_search('group g_ip_') }}"
    ip_colo: "{{ crm_conf_show.stdout | regex_search('colocation col_saphana_ip_') }}"
    order: "{{ crm_conf_show.stdout | regex_search('order ord_SAPHana_') }}"
    resource_stickiness: "{{ (crm_conf_show.stdout | regex_search('resource-stickiness=([0-9]*)', '\\1'))[0] }}"
    migration_threshold: "{{ (crm_conf_show.stdout | regex_search('migration-threshold=([0-9]*)', '\\1'))[0] }}"
  changed_when: false

- name: Ensure maintenance mode is active
  ansible.builtin.command: crm configure property maintenance-mode=true
  when: crm_maintenance_mode is false

- name: Create HANA topology resource
  ansible.builtin.command: "crm configure primitive rsc_SAPHanaTopology_HDB_{{ sap_hana_install_sid }}{{ sap_hana_install_instance_number }} ocf:suse:SAPHanaTopology operations $id=\"rsc_sap2_HDB_{{ sap_hana_install_sid }}{{ sap_hana_install_instance_number }}-operations\" op monitor interval=\"10\" timeout=\"600\" op start interval=\"0\" timeout=\"600\" op stop interval=\"0\" timeout=\"300\" params SID=\"{{ sap_hana_install_sid }}\" InstanceNumber=\"{{ sap_hana_install_instance_number }}\""
  when: hana_topology_resource | length == 0

- name: Set stonith-timeout [sdb]
  ansible.builtin.command: crm configure property stonith-timeout=144
  when:
    - stonith_timeout | length == 0
    - use_sbd | bool

- name: Set stonith-timeout [azure fencing]
  ansible.builtin.command: crm configure property stonith-timeout=900
  when:
    - stonith_timeout | length == 0
    - use_sbd | bool

- name: Enable stonith
  ansible.builtin.command: crm configure property stonith-enabled=true
  when: stonith_enabled != 'true'

- name: Create HANA topology clone
  ansible.builtin.command: "crm configure clone cln_SAPHanaTopology_HDB_{{ sap_hana_install_sid }}{{ sap_hana_install_instance_number }} rsc_SAPHanaTopology_HDB_{{ sap_hana_install_sid }}{{ sap_hana_install_instance_number }} meta clone-node-max=\"1\" target-role=\"Started\" interleave=\"true\""
  when: hana_topology_clone | length == 0

- name: Create HANA resource
  ansible.builtin.command: "crm configure primitive rsc_SAPHana_HDB_{{ sap_hana_install_sid }}{{ sap_hana_install_instance_number }} ocf:suse:SAPHana operations $id=\"rsc_sap_HDB_{{ sap_hana_install_sid }}{{ sap_hana_install_instance_number }}-operations\" op start interval=\"0\" timeout=\"3600\" op stop interval=\"0\" timeout=\"3600\" op promote interval=\"0\" timeout=\"3600\" op monitor interval=\"60\" role=\"Master\" timeout=\"700\" op monitor interval=\"61\" role=\"Slave\" timeout=\"700\" params SID=\"{{ sap_hana_install_sid }}\" InstanceNumber=\"{{ sap_hana_install_instance_number }}\" PREFER_SITE_TAKEOVER=\"true\" DUPLICATE_PRIMARY_TIMEOUT=\"7200\" AUTOMATED_REGISTER=\"false\""
  when: hana_resource | length == 0

- name: Create HANA resource clone
  ansible.builtin.command: "crm configure ms msl_SAPHana_HDB_{{ sap_hana_install_sid }}{{ sap_hana_install_instance_number }} rsc_SAPHana_HDB_{{ sap_hana_install_sid }}{{ sap_hana_install_instance_number }} meta notify=\"true\" clone-max=\"2\" clone-node-max=\"1\" target-role=\"Started\" interleave=\"true\""
  when: hana_resource_clone | length == 0

- name: Create IP resource
  # TODO - IP address is hardcoded here, that's not good and will only work when the VIP perfectly matches.
  ansible.builtin.command: "crm configure primitive rsc_ip_{{ sap_hana_install_sid }}{{ sap_hana_install_instance_number }} ocf:heartbeat:IPaddr2 meta target-role=\"Started\" operations $id=\"rsc_ip_HDB_{{ sap_hana_install_sid }}{{ sap_hana_install_instance_number }}-operations\" op monitor interval=\"10s\" timeout=\"20s\" params ip=\"10.10.1.12\""
  when: ip_resource | length == 0

- name: Create socat resource
  ansible.builtin.command: "crm configure primitive rsc_socat_HDB_{{ sap_hana_install_sid }}{{ sap_hana_install_instance_number }} azure-lb params port=625{{ sap_hana_install_instance_number }} op monitor timeout=20 interval=10 op_params depth=0 meta resource-stickiness=0"
  when: ip_nc | length == 0

- name: Configure IP group
  ansible.builtin.command: "crm configure group g_ip_HDB_{{ sap_hana_install_sid }}{{ sap_hana_install_instance_number }} rsc_ip_{{ sap_hana_install_sid }}{{ sap_hana_install_instance_number }} rsc_socat_{{ sap_hana_install_sid }}{{ sap_hana_install_instance_number }}"
  when: ip_grp | length == 0

- name: Configure hana/IP colocation
  ansible.builtin.command: "crm configure colocation col_saphana_ip_HDB_{{ sap_hana_install_sid }}{{ sap_hana_install_instance_number }} 4000: g_ip_HDB_{{ sap_hana_install_sid }}{{ sap_hana_install_instance_number }}:Started msl_SAPHana_HDB_{{ sap_hana_install_sid }}{{ sap_hana_install_instance_number }}:Master"
  when: ip_colo | length == 0

- name: Configure order
  ansible.builtin.command: "crm configure order ord_SAPHana_HDB_{{ sap_hana_install_sid }}{{ sap_hana_install_instance_number }} Optional: cln_SAPHanaTopology_HDB_{{ sap_hana_install_sid }}{{ sap_hana_install_instance_number }} msl_SAPHana_HDB_{{ sap_hana_install_sid }}{{ sap_hana_install_instance_number }}"
  when: order | length == 0

- name: Wait for cluster to settle
  ansible.builtin.pause:
    seconds: 30

# Assume that hana resource needs a cleanup
# There really should be a way of checking if this needs to be run!
# Plus the linter doesn't like it!
- name: Cleanup
  ansible.builtin.command: crm resource cleanup rsc_SAPHana_HDB_{{ sap_hana_install_sid }}{{ sap_hana_install_instance_number }}

- name: Wait for cluster to settle
  ansible.builtin.pause:
    seconds: 30

# Get current maintenance state
- name: Refresh cluster status
  ansible.builtin.command: crm configure show
  register: refreshed_crm_conf_show
  changed_when: false

- name: Set crm facts
  ansible.builtin.set_fact:
    refreshed_crm_maintenance_mode: "{{ (refreshed_crm_conf_show.stdout | regex_search('maintenance-mode=([a-z]*)', '\\1' ))[0] }}"
  changed_when: false

- name: Ensure maintenance mode is disabled
  ansible.builtin.command: crm configure property maintenance-mode=false
  when: refreshed_crm_maintenance_mode is true

- name: Ensure resource-stickiness is configured
  ansible.builtin.command: crm configure rsc_defaults resource-stickiness=1000
  when: resource_stickiness != '1000'

- name: Ensure migration-threshold is configured
  ansible.builtin.command: crm configure rsc_defaults migration-threshold=5000
  when: migration_threshold != '1000'
