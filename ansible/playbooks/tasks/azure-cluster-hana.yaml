---
- name: Get cluster status
  ansible.builtin.command:
    cmd: crm configure show
  register: crm_conf_show
  changed_when: false

- name: Set hana crm facts
  ansible.builtin.set_fact:
    crm_maintenance_mode: "{{ (crm_conf_show.stdout | regex_search('maintenance-mode=([a-z]*)', '\\1'))[0] }}"
    stonith_enabled: "{{ (crm_conf_show.stdout | regex_search('stonith-enabled=([a-z]*)', '\\1'))[0] | default('false') }}"
    stonith_timeout: "{{ crm_conf_show.stdout | regex_search('stonith-timeout') }}"  # this should be variable!
    hana_resource: "{{ crm_conf_show.stdout | regex_search('primitive rsc_SAPHanaCtl_') }}"
    hana_clone: "{{ crm_conf_show.stdout | regex_search('ms ms(.)_SAPHanaCtl_') }}"
    hana_topology_resource: "{{ crm_conf_show.stdout | regex_search('primitive rsc_SAPHanaTpg') }}"
    hana_topology_clone: "{{ crm_conf_show.stdout | regex_search('clone cln_SAPHanaTpg') }}"
    hana_filesystem_resource: "{{ crm_conf_show.stdout | regex_search('primitive rsc_SAPHanaFil_') }}"
    hana_filesystem_clone: "{{ crm_conf_show.stdout | regex_search('primitive cln_SAPHanaFil_') }}"
    ip_resource: "{{ crm_conf_show.stdout | regex_search('primitive rsc_ip_') }}"
    ip_nc: "{{ crm_conf_show.stdout | regex_search('primitive rsc_socat_') }}"
    ip_grp: "{{ crm_conf_show.stdout | regex_search('group g_ip_') }}"
    ip_colo: "{{ crm_conf_show.stdout | regex_search('colocation col_saphana_ip_') }}"
    cluster_order: "{{ crm_conf_show.stdout | regex_search('order ord_SAPHana_') }}"
    resource_stickiness: "{{ (crm_conf_show.stdout | regex_search('resource-stickiness=([0-9]*)', '\\1'))[0] }}"
    migration_threshold: "{{ (crm_conf_show.stdout | regex_search('migration-threshold=([0-9]*)', '\\1'))[0] }}"
  changed_when: false

- name: Ensure maintenance mode is active
  ansible.builtin.command:
    cmd: crm maintenance on
  when: crm_maintenance_mode is false or crm_maintenance_mode == 'unknown'

- name: Set stonith-timeout [sbd]
  ansible.builtin.command:
    cmd: crm configure property stonith-timeout=144
  when:
    - stonith_timeout | length == 0
    - use_sbd | bool

- name: Set stonith-timeout [azure fencing]
  ansible.builtin.command:
    cmd: crm configure property stonith-timeout=900
  when:
    - stonith_timeout | length == 0
    - not use_sbd | bool

- name: Enable stonith
  ansible.builtin.command:
    cmd: crm configure property stonith-enabled=true
  when: stonith_enabled != 'true'

  # see https://learn.microsoft.com/en-us/azure/sap/workloads/high-availability-guide-suse-pacemaker?tabs=msi#create-a-fencing-device-on-the-pacemaker-cluster
- name: Enable concurrent fencing (native fencing)
  ansible.builtin.command:
    cmd: crm configure property concurrent-fencing=true
  when:
    - not use_sbd | bool

- name: Create HANA topology resource
  ansible.builtin.command:
    cmd: >-
      crm configure primitive
      rsc_SAPHanaTpg_{{ sap_hana_install_sid }}_HDB{{ sap_hana_install_instance_number }}
      ocf:suse:SAPHanaTopology
      operations
      $id="rsc_sap2_{{ sap_hana_install_sid }}_HDB{{ sap_hana_install_instance_number }}-operations"
      op monitor interval="10" timeout="600"
      op start interval="0" timeout="600"
      op stop interval="0" timeout="300"
      params
      SID="{{ sap_hana_install_sid }}"
      InstanceNumber="{{ sap_hana_install_instance_number }}"
  when: hana_topology_resource | length == 0

- name: Create HANA topology clone
  ansible.builtin.command:
    cmd: >-
      crm configure clone
      cln_SAPHanaTpg_{{ sap_hana_install_sid }}_HDB{{ sap_hana_install_instance_number }}
      rsc_SAPHanaTpg_{{ sap_hana_install_sid }}_HDB{{ sap_hana_install_instance_number }}
      meta
      clone-node-max="1"
      target-role="Started"
      interleave="true"
  when: hana_topology_clone | length == 0

- name: Create HANA resource
  ansible.builtin.command:
    cmd: >-
      crm configure primitive
      {{ rsc_saphanactl }}
      ocf:suse:SAPHana
      operations
      $id="rsc_sap_{{ sap_hana_install_sid }}_HDB{{ sap_hana_install_instance_number }}-operations"
      op start interval="0" timeout="3600"
      op stop interval="0" timeout="3600"
      op promote interval="0" timeout="3600"
      op monitor interval="60" role="Master" timeout="700"
      op monitor interval="61" role="Slave" timeout="700"
      params
      SID="{{ sap_hana_install_sid }}"
      InstanceNumber="{{ sap_hana_install_instance_number }}"
      PREFER_SITE_TAKEOVER="true"
      DUPLICATE_PRIMARY_TIMEOUT="7200"
      AUTOMATED_REGISTER="false"
  when:
    - hana_resource | length == 0
    - not use_hana_sr_angi | bool

- name: Create HANA angi resource
  ansible.builtin.command:
    cmd: >-
      crm configure primitive
      {{ rsc_saphanactl }}
      ocf:suse:SAPHanaController
      op start interval="0" timeout="3600"
      op stop interval="0" timeout="3600"
      op promote interval="0" timeout="900"
      op demote interval="0" timeout="320"
      op monitor interval="60" role="Promoted" timeout="700"
      op monitor interval="61" role="Unpromoted" timeout="700"
      params
      SID="{{ sap_hana_install_sid }}"
      InstanceNumber="{{ sap_hana_install_instance_number }}"
      PREFER_SITE_TAKEOVER="true"
      DUPLICATE_PRIMARY_TIMEOUT="7200"
      AUTOMATED_REGISTER="false"
      meta
      priority="100"
  when:
    - hana_resource | length == 0
    - use_hana_sr_angi | bool

- name: Create HANA resource clone
  ansible.builtin.command:
    cmd: >-
      crm configure ms
      {{ ms_saphanactl }}
      {{ rsc_saphanactl }}
      meta
      notify="true"
      clone-max="2"
      clone-node-max="1"
      target-role="Started"
      interleave="true"
      maintenance="true"
  when: hana_clone | length == 0

- name: Create HANA Filesystem resource
  ansible.builtin.command:
    cmd: >-
      crm configure
      primitive
      rsc_SAPHanaFil_{{ sap_hana_install_sid }}_HDB{{ sap_hana_install_instance_number }}
      ocf:suse:SAPHanaFilesystem
      operations
      $id="rsc_sap3_{{ sap_hana_install_sid }}_HDB{{ sap_hana_install_instance_number }}-operations"
      op start interval="0" timeout="10"
      op stop interval="0" timeout="20"
      op monitor interval="120" timeout="120"
      params
      SID="{{ sap_hana_install_sid }}"
      InstanceNumber="{{ sap_hana_install_instance_number }}"
      ON_FAIL_ACTION="fence"
  when:
    - use_hana_sr_angi | bool
    - hana_filesystem_resource | length == 0

- name: Create HANA Filesystem clone
  ansible.builtin.command:
    cmd: >-
      crm configure
      clone
      cln_SAPHanaFil_{{ sap_hana_install_sid }}_HDB{{ sap_hana_install_instance_number }}
      rsc_SAPHanaFil_{{ sap_hana_install_sid }}_HDB{{ sap_hana_install_instance_number }}
      meta
      clone-max="2"
      clone-node-max="1"
      target-role="Started"
      interleave="true"
  when:
    - use_hana_sr_angi | bool
    - hana_filesystem_clone | length == 0

- name: Validate cluster IP
  vars:
    ip_regex: "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
  assert:
    that: cluster_ip is match(ip_regex)
    fail_msg: "The provided cluster IP address is not valid."
  when: cluster_ip is defined

- name: Create IP resource
  # cluster_ip is calculated by terraform in a similar way to hana ips, if the user provides their own they need to provide cluster_ip in the same subnet as well
  ansible.builtin.command:
    cmd: >-
      crm configure primitive
      rsc_ip_{{ sap_hana_install_sid }}_HDB{{ sap_hana_install_instance_number }}
      ocf:heartbeat:IPaddr2
      meta
      target-role="Started"
      operations
      $id="rsc_ip_{{ sap_hana_install_sid }}_HDB{{ sap_hana_install_instance_number }}-operations"
      op monitor interval="10s" timeout="20s"
      params ip="{{ cluster_ip }}"
  when: ip_resource | length == 0

- name: Create socat resource
  ansible.builtin.command:
    cmd: >-
      crm configure primitive
      {{ rsc_socat }}
      azure-lb
      params
      port=625{{ sap_hana_install_instance_number }}
      op monitor timeout="20" interval="10"
      op_params depth=0
      meta resource-stickiness=0
  when: ip_nc | length == 0

- name: Configure IP group
  ansible.builtin.command:
    cmd: >-
      crm configure group
      g_ip_{{ sap_hana_install_sid }}_HDB{{ sap_hana_install_instance_number }}
      rsc_ip_{{ sap_hana_install_sid }}_HDB{{ sap_hana_install_instance_number }}
      {{ rsc_socat }}
  when: ip_grp | length == 0

- name: Configure hana/IP colocation
  ansible.builtin.command:
    cmd: >-
      crm configure colocation
      col_saphana_ip_{{ sap_hana_install_sid }}_HDB{{ sap_hana_install_instance_number }}
      4000:
      g_ip_{{ sap_hana_install_sid }}_HDB{{ sap_hana_install_instance_number }}:Started
      {{ ms_saphanactl }}:Master
  when: ip_colo | length == 0

- name: Configure order
  ansible.builtin.command:
    cmd: >-
      crm configure order
      ord_SAPHana_{{ sap_hana_install_sid }}_HDB{{ sap_hana_install_instance_number }}
      Optional:
      cln_SAPHanaTpg_{{ sap_hana_install_sid }}_HDB{{ sap_hana_install_instance_number }}
      {{ ms_saphanactl }}
  when: cluster_order | length == 0

- name: Ensure maintenance mode is off
  ansible.builtin.command:
    cmd: crm maintenance off

- name: Wait for cluster to settle
  ansible.builtin.command:
    cmd: cs_wait_for_idle -s 5

# Assume that hana resource needs a cleanup
# There really should be a way of checking if this needs to be run!
# Plus the linter doesn't like it!
- name: Cleanup
  ansible.builtin.command:
    cmd: crm resource cleanup {{ rsc_saphanactl }}

- name: Wait for cluster to settle
  ansible.builtin.command:
    cmd: cs_wait_for_idle -s 5

- name: Ensure resource-stickiness is configured
  ansible.builtin.command:
    cmd: crm configure rsc_defaults resource-stickiness=1000
  when: resource_stickiness != '1000'

# Get current maintenance state
- name: Refresh cluster status
  ansible.builtin.command:
    cmd: crm configure show
  register: refreshed_crm_conf_show
  changed_when: false

- name: Refresh crm facts
  ansible.builtin.set_fact:
    refreshed_crm_maintenance_mode: "{{ (refreshed_crm_conf_show.stdout | regex_search('maintenance-mode=([a-z]*)', '\\1'))[0] | default('unknown') }}"
  changed_when: false

- name: Ensure maintenance mode is disabled
  ansible.builtin.command:
    cmd: crm maintenance off
  when: refreshed_crm_maintenance_mode is true or refreshed_crm_maintenance_mode == 'unknown'

# For debug purpose only
- name: Get cluster status at the end
  ansible.builtin.command:
    cmd: crm configure show
  changed_when: false
