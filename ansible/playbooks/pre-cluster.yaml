---
- hosts: all
  name: Cluster preparation
  remote_user: cloudadmin
  pre_tasks:
  - name: Detect cloud platform
    ansible.builtin.include_tasks:
      ./tasks/detect-cloud-platform.yaml
  - name: Detection result
    ansible.builtin.debug:
      msg: "Cloud platform appears to be {{ cloud_platform_name }}"

  tasks:
  - name: Ensure all hosts are present in all hosts /etc/hosts files
    become: true
    become_user: root
    ansible.builtin.lineinfile:
      path: "/etc/hosts"
      regexp: ".*{{ hostvars[item]['ansible_hostname'] }}.*{{ hostvars[item]['ansible_hostname'] }}"
      line: "{{ hostvars[item]['ansible_default_ipv4']['address'] }}    {{ hostvars[item]['ansible_hostname'] }}    {{ hostvars[item]['ansible_hostname'] }}"
      state: present
      backup: true
    with_items: "{{ groups['all'] }}"

  - name: Ensure that /root/.ssh exists on hana
    become: true
    become_user: root
    ansible.builtin.file:
      path: /root/.ssh
      state: directory
      owner: root
      group: root
      mode: '0700'
    when: inventory_hostname in groups.hana

  - name: Ensure that /home/cloudadmin/.ssh exists on hana
    ansible.builtin.file:
      path: "{{ ansible_env.HOME }}/.ssh"
      state: directory
      owner: "{{ansible_user}}"
      group: users
      mode: '0700'
    when: inventory_hostname in groups.hana

  - name: Generate public/private keys for root on hana hosts
    become: true
    become_user: root
    community.crypto.openssh_keypair:
      group: root
      owner: root
      mode: '0600'
      path: /root/.ssh/id_rsa
      type: rsa
      size: 4096
    register: ssh_root_keys
    when: inventory_hostname in groups.hana

  - name: Generate public/private keys for cloudadmin on hana hosts
    community.crypto.openssh_keypair:
      owner: "{{ansible_user}}"
      group: users
      mode: '0600'
      path: "{{ ansible_env.HOME }}/.ssh/id_rsa"
      type: rsa
      size: 4096
    register: ssh_user_keys
    when: inventory_hostname in groups.hana

  - name: Apply root key to root Authorised Keys
    become: true
    become_user: root
    ansible.posix.authorized_key:
      user: root
      state: present
      key: "{{ hostvars[idx].ssh_root_keys.public_key }}"
    loop: "{{ groups['hana'] }}"
    loop_control:
      loop_var: idx
    when: inventory_hostname in groups.hana

  - name: Apply cloudadmin pub key to other node cloudadmin Authorised Keys
    ansible.posix.authorized_key:
      user: "{{ansible_user}}"
      state: present
      key: "{{ hostvars[item].ssh_user_keys.public_key }}"
    when: inventory_hostname in groups.hana and hostvars[item]['ansible_hostname'] in groups.hana and ansible_hostname != item
    with_items: "{{ groups['all'] }}"

  - name: Slurp ssh daemon public key
    ansible.builtin.slurp:
      src: /etc/ssh/ssh_host_ecdsa_key.pub
    register: pubkeys
    when: inventory_hostname in groups.hana

  - name: Populate /root/.ssh/known_hosts
    become: true
    become_user: root
    ansible.builtin.known_hosts:
      path: /root/.ssh/known_hosts
      name: "{{ hostvars[idx]['ansible_hostname'] }}"
      state: present
      key: "{{ hostvars[idx]['ansible_hostname'] }},{{ hostvars[idx]['ansible_default_ipv4']['address'] }} {{ (hostvars[idx].pubkeys.content | b64decode | split(' '))[0] }} {{ (hostvars[idx].pubkeys.content | b64decode | split(' '))[1] }}"
    loop: "{{ groups['hana'] }}"
    loop_control:
      loop_var: idx
    when: inventory_hostname in groups.hana

  - name: Ensure hostnames are preserved [aws]
    become: true
    become_user: root
    ansible.builtin.lineinfile:
      path: /etc/cloud/cloud.cfg
      regexp: '^preserve_hostname:'
      line: 'preserve_hostname: true'
      mode: '0544'
      owner: root
      group: root
      create: yes
      backup: yes
    when: cloud_platform_is_aws
