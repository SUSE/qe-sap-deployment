---

- name: Storage profile details
  ansible.builtin.debug:
    msg: "{{ item }} "

# Gather device info (needed to use ansible_facts.devices)
- name: Gather blockdevice facts (nvmeXn1 sizes)
  ansible.builtin.setup:
    gather_subset:
      - hardware
  when:
    - cloud_platform_is_aws and not aws_machine_type_is_r4

# Get a list of all nvme device names
- name: Build list of nvme devices and their sizes
  ansible.builtin.set_fact:
    nvme_device_list: >-
      {{
        ansible_facts.devices |
        dict2items |
        selectattr('key', 'match', '^nvme[0-9]+n1$')|
        list
      }}
  when:
    - cloud_platform_is_aws and not aws_machine_type_is_r4

- name: Convert ebs_id_to_device_name list to a dictionary
  ansible.builtin.set_fact:
    ebs_id_to_device_name_map: >-
      {{
        ebs_id_to_device_name
        | map('dict2items')
        | flatten
        | items2dict
      }}
  when:
    - cloud_platform_is_aws and not aws_machine_type_is_r4

# Using data exported by terraform in ebs_id_to_device_name, create a
# sdX -> nvmeXn1 map, based on the device serial
- name: Get serial number for each nvme device
  ansible.builtin.command: cat /sys/class/block/{{ item.key }}/device/serial
  register: nvme_serial_list
  loop: "{{ nvme_device_list }}"
  changed_when: false
  when:
    - cloud_platform_is_aws and not aws_machine_type_is_r4

- name: Build /dev/sdX to nvme device mapping for attached volumes
  ansible.builtin.set_fact:
    sd_to_nvme_map: "{{ sd_to_nvme_map | default({}) | combine({ device_name: '/dev/' ~ item.item.key }) }}"
  loop: "{{ nvme_serial_list.results }}"
  vars:
    # terraform (aws) exports the serial as "vol-xxx" while the system sees it as "volxxx", so we need to omit the '-'.
    # The regex is constructed to not match on serials that already start with vol-
    volume_id: "{{ item.stdout | regex_replace('^vol(?!-)', 'vol-') }}"
    device_name: "{{ ebs_id_to_device_name_map.get(volume_id, '') }}"
  when:
    - cloud_platform_is_aws and not aws_machine_type_is_r4
    - device_name != ''  # only map if the serial id exists in the exported serial ids from terraform

- name: Adjust PV list for storage profile {{ item.key }}
  ansible.builtin.set_fact:
    adjusted_pv: >-
      {{
        item.value.pv
        | map('extract', sd_to_nvme_map)
        | list
      }}
  when:
    - cloud_platform_is_aws and not aws_machine_type_is_r4

- name: Physical Volume list that will be used
  ansible.builtin.debug:
    msg: "Using PV list: {{ (adjusted_pv is defined and (adjusted_pv | length) > 0) | ternary(adjusted_pv, item.value.pv) }}"

# Create Volume Group
- name: "SAP Storage Preparation - Volume Group One: {{ item.value.name + ' on ' + sap_storage_cloud_type }}"
  community.general.lvg:
    vg: "{{ item.value.vg }}"
    pvs: "{{ (adjusted_pv is defined and (adjusted_pv | length) > 0) | ternary(adjusted_pv, item.value.pv) }}"
    force: true
  register: lvg_result
  until: lvg_result is successful
  retries: 5
  delay: 10

- name: Clear adjusted_pv fact for the next iteration
  ansible.builtin.set_fact:
    adjusted_pv: ""
  when: adjusted_pv is defined

# Create Logical Group - One
- name: "SAP Storage Preparation - Logical Volume One: {{ item.value.name + ' on ' + sap_storage_cloud_type }}"
  community.general.lvol:
    vg: "{{ item.value.vg }}"
    lv: "{{ item.value.lv }}"
    size: 100%VG
  when:
    - "item.value.numluns == '1'"

# Create Logical Group - Striped
- name: "SAP Storage Preparation - Logical Volume Striped: {{ item.value.name + ' on ' + sap_storage_cloud_type }}"
  community.general.lvol:
    vg: "{{ item.value.vg }}"
    lv: "{{ item.value.lv }}"
    size: 100%VG
    opts: "-i {{ item.value.numluns }} -I {{ item.value.stripesize }}"
  when:
    - "item.value.numluns != '1'"

# Create Filesystem
- name: "SAP Storage Preparation - Filesystem: {{ item.value.name + ' on ' + sap_storage_cloud_type }}"
  community.general.filesystem:
    fstype: xfs
    dev: "/dev/{{ item.value.vg }}/{{ item.value.lv }}"

# Mount Filesystem
- name: "SAP Storage Preparation - Mount: {{ item.value.name + ' on ' + sap_storage_cloud_type }}"
  ansible.posix.mount:
    path: "{{ item.value.directory }}"
    fstype: xfs
    src: "/dev/mapper/{{ item.value.vg }}-{{ item.value.lv }}"
    state: mounted
