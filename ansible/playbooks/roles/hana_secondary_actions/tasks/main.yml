---
- name: Prepare secondary Action - Dump cluster status
  ansible.builtin.command: crm status
  become: true
  register: crm_initial
  changed_when: false

- name: Prepare secondary Action - Assert this node is not master
  ansible.builtin.assert:
    that:
      - crm_initial.stdout is not search('\* Masters:\s*\[\s*{{ inventory_hostname }}\s*\]')
    fail_msg: "{{ inventory_hostname }} is MASTER – expected replica"
    success_msg: "{{ inventory_hostname }} is in replica mode"

- name: Prepare secondary Action - Wait cluster idle (pre-action)
  ansible.builtin.command: cs_wait_for_idle --sleep 5
  become: true
  register: idle_pre
  retries: "{{ cs_wait_timeout // 5 }}"
  delay: 5
  until: idle_pre.rc == 0
  changed_when: false

# SBD-related stuff
- name: Prepare secondary Action - Gather SBD-delay parameters # noqa: command-instead-of-shell the command variable actually reuires shell
  become: true
  ansible.builtin.shell: "{{ item.cmd }}"
  args:
    warn: false
  register: sbddelay
  changed_when: false
  failed_when: false
  loop:
    - name: corosync_token
      cmd: "corosync-cmapctl | awk -F ' = ' '/totem.token/ {print int($2/1000)}'"
    - name: corosync_consensus
      cmd: "corosync-cmapctl | awk -F ' = ' '/totem.consensus/ {print int($2/1000)}'"
    - name: pcmk_delay_max
      cmd: "crm resource param stonith-sbd show pcmk_delay_max | sed 's/[^0-9]*//g'"
    - name: sbd_watchdog_timeout
      cmd: "grep -oP '(?<=^SBD_WATCHDOG_TIMEOUT=)[[:digit:]]+' /etc/sysconfig/sbd"
    - name: sbd_delay_start
      cmd: "grep -oP '(?<=^SBD_DELAY_START=)([[:digit:]]+|yes|no)+' /etc/sysconfig/sbd"
  when: action == 'crash'

- name: Prepare secondary Action - Set SBD delay facts
  ansible.builtin.set_fact:
    corosync_token: "{{ sbddelay.results | selectattr('item.name', '==', 'corosync_token') | map(attribute='stdout') | first | int }}"
    corosync_consensus: "{{ sbddelay.results | selectattr('item.name', '==', 'corosync_consensus') | map(attribute='stdout') | first | int }}"
    pcmk_delay_max: "{{ sbddelay.results | selectattr('item.name', '==', 'pcmk_delay_max') | map(attribute='stdout') | first | int }}"
    sbd_watchdog_timeout: "{{ sbddelay.results | selectattr('item.name', '==', 'sbd_watchdog_timeout') | map(attribute='stdout') | first | int }}"
    sbd_delay_start: "{{ sbddelay.results | selectattr('item.name', '==', 'sbd_delay_start') | map(attribute='stdout') | first | default('yes') }}"
  when: action == 'crash'

- name: Prepare secondary Action - Configure SBD start-delay
  ansible.builtin.lineinfile:
    path: /etc/sysconfig/sbd
    regexp: "^SBD_DELAY_START="
    line: "SBD_DELAY_START={{ sbd_delay_start }}"
  become: true
  when: action == 'crash'

- name: Prepare secondary Action - Create systemd drop-in dir for sbd
  ansible.builtin.file:
    path: /etc/systemd/system/sbd.service.d
    state: directory
    owner: root
    group: root
    mode: "0755"
  become: true
  when: action == 'crash'

- name: Prepare secondary Action - Write SBD service timeout override
  ansible.builtin.copy:
    dest: /etc/systemd/system/sbd.service.d/timeout.conf
    owner: root
    group: root
    mode: "0644"
    content: |
      [Service]
      TimeoutSec={{ {
        'corosync_token'      : corosync_token,
        'corosync_consensus'  : corosync_consensus,
        'pcmk_delay_max'      : pcmk_delay_max,
        'sbd_watchdog_timeout': sbd_watchdog_timeout,
        'sbd_delay_start'     : sbd_delay_start
      } | calc_sbd_delay + 30 }}
  become: true
  when: action == 'crash'

- name: Prepare secondary Action - Pause for calculated SBD delay + 30s
  ansible.builtin.pause:
    seconds: "{{ {'corosync_token': corosync_token, 'corosync_consensus': corosync_consensus, 'pcmk_delay_max': pcmk_delay_max, 'sbd_watchdog_timeout': sbd_watchdog_timeout,
      'sbd_delay_start': sbd_delay_start} | calc_sbd_delay + 30 }}"
  become: true
  when: action == 'crash'
  changed_when: false

- name: Prepare secondary Action - Wait for Pacemaker to be active # noqa: command-instead-of-module - we keep systemctl to mimic openqa behaviour
  ansible.builtin.command: systemctl --no-pager is-active pacemaker
  register: pm_active
  retries: "{{ pacemaker_timeout // 15 }}"
  delay: 15
  until: pm_active.stdout == 'active'
  become: true
  changed_when: false
  when: action == 'crash'

# Secondary action
- name: Secondary Action – Stop HANA
  ansible.builtin.shell: "sudo -iu {{ sap_sidadm }} HDB stop" # noqa: command-instead-of-shell the command variable actually reuires shell
  become: true
  when: action == 'stop'
  changed_when: true

- name: Secondary Action – Kill HANA
  ansible.builtin.shell: "sudo -iu {{ sap_sidadm }} HDB kill -x" # noqa: command-instead-of-shell the command variable actually reuires shell
  become: true
  when: action == 'kill'
  changed_when: true

- name: Secondary Action – Crash OS
  ansible.builtin.shell: echo b > /proc/sysrq-trigger
  async: 1
  poll: 0
  become: true
  when: action == 'crash'
  changed_when: true

# Post secondary action
- name: Post secondary Action - Wait for SSH back
  ansible.builtin.wait_for_connection:
    delay: 15
    timeout: 900
  when: action in ['crash','stop']
  changed_when: false

- name: Post secondary Action - Wait cluster idle (post-action)
  ansible.builtin.command: cs_wait_for_idle --sleep 5
  become: true
  register: idle_post
  retries: "{{ cs_wait_timeout // 5 }}"
  delay: 5
  until: idle_post.rc == 0
  changed_when: false

- name: Post secondary Action - Compute HANA resource prefix
  ansible.builtin.set_fact:
    use_angi: "{{ use_angi | default(false) | bool }}"
    master_resource_type: "{{ use_angi | default(false) | bool | ternary('mst', 'msl') }}"

- name: Post secondary Action - Compute HANA resource name
  ansible.builtin.set_fact:
    resource_name: "{{ master_resource_type }}_SAPHanaCtl_{{ sap_hana_install_sid }}_HDB{{ sap_hana_install_instance_number }}"

- name: Post secondary Action - Wait for HANA resource to be running on this node
  ansible.builtin.command: crm resource status "{{ resource_name }}"
  register: res_stat
  become: true
  retries: "{{ hana_sync_timeout // 30 }}"
  delay: 30
  until: 'res_stat.stdout is search("is running on: " ~ inventory_hostname)'
  changed_when: false

- name: Post secondary Action - Assert this node did not become MASTER # noqa: command-instead-of-shell the command variable actually reuires shell
  become: true
  ansible.builtin.shell: crm resource status "{{ resource_name }}"
  register: master_out
  changed_when: false
  failed_when: 'master_out.stdout is search("is running on: " ~ inventory_hostname ~ " Master")'

- name: Post secondary Action - Cleanup HANA resource
  ansible.builtin.command: crm resource cleanup
  become: true
  changed_when: false

- name: Post secondary Action - Wait cluster idle after cleanup
  ansible.builtin.command: cs_wait_for_idle --sleep 5
  become: true
  register: idle_cleanup
  retries: "{{ cluster_settle_retries }}"
  delay: "{{ cluster_settle_delay }}"
  until: idle_cleanup.rc == 0
  changed_when: false
