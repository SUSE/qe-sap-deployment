# This file is used to calculate and store in some locals (local variables)
# the IP addresses of all the machines.

locals {
  ###################################################
  ###################################################
  # R A N G E s
  ###################################################
  ###################################################
  # There is a hierarchy of nested ranges

  subnet_address_range = (
    var.subnet_name == "" ?
    var.ip_cidr_range :
    var.ip_cidr_range == "" ? data.google_compute_subnetwork.current-subnet.0.ip_cidr_range : var.ip_cidr_range
  )

  ###################################################
  ###################################################
  # I P s
  ###################################################
  ###################################################
  # This locals entry is used to store the IP addresses of all the machines.
  # Autogenerated addresses example based in 10.0.0.0/24
  # Iscsi server: 10.0.0.4
  # Monitoring: 10.0.0.5
  # Hana ips: 10.0.0.10, 10.0.0.11
  # Hana cluster vip: 10.0.0.12
  # Hana cluster vip secondary: 10.0.0.13
  # DRBD ips: 10.0.0.20, 10.0.0.21
  # DRBD cluster vip: 10.0.0.22
  # Netweaver ips: 10.0.0.30, 10.0.0.31, 10.0.0.32, 10.0.0.33
  # Netweaver virtual ips: 10.0.0.34, 10.0.0.35, 10.0.0.36, 10.0.0.37
  # If the addresses are provided by the user they will always have preference

  ip_start = 4

  ###################################################
  # INFRA
  monitoring_srv_ip = (
    var.monitoring_srv_ip != "" ?
    var.monitoring_srv_ip :
    cidrhost(local.subnet_address_range, local.ip_start)
  )

  iscsi_ip_start = local.ip_start + 1
  iscsi_ips = (
    length(var.iscsi_ips) != 0 ?
    var.iscsi_ips :
    [
      for ip_index in range(local.iscsi_ip_start, var.iscsi_count + local.iscsi_ip_start) :
      cidrhost(local.subnet_address_range, ip_index)
    ]
  )

  ###################################################
  # HANA
  hana_ip_start = 10
  hana_ips = (
    length(var.hana_ips) != 0 ?
    var.hana_ips :
    [
      for ip_index in range(var.hana_count) :
      cidrhost(local.subnet_address_range, ip_index + local.hana_ip_start)
    ]
  )

  # Virtual IP addresses if a load balancer is used. In this case the virtual ip address belongs to the same subnet than the machines
  hana_cluster_vip_lb = (
    var.hana_cluster_vip != "" ?
    var.hana_cluster_vip :
    cidrhost(local.subnet_address_range, local.hana_ip_start + var.hana_count)
  )
  hana_cluster_vip_secondary_lb = (
    var.hana_cluster_vip_secondary != "" ?
    var.hana_cluster_vip_secondary :
    cidrhost(local.subnet_address_range, local.hana_ip_start + var.hana_count + 1)
  )

  # Virtual IP addresses if a route is used. In this case the virtual ip address belongs to a different subnet than the machines
  hana_cluster_vip_route = (
    var.hana_cluster_vip != "" ?
    var.hana_cluster_vip :
    cidrhost(cidrsubnet(local.subnet_address_range, -8, 0), 256 + local.hana_ip_start + var.hana_count)
  )
  hana_cluster_vip_secondary_route = (
    var.hana_cluster_vip_secondary != "" ?
    var.hana_cluster_vip_secondary :
    cidrhost(cidrsubnet(local.subnet_address_range, -8, 0), 256 + local.hana_ip_start + var.hana_count + 1)
  )

  # Select the final virtual ip address
  hana_cluster_vip = (
    var.hana_cluster_vip_mechanism == "load-balancer" ?
    local.hana_cluster_vip_lb :
    local.hana_cluster_vip_route
  )

  hana_cluster_vip_secondary = (
    var.hana_cluster_vip_mechanism == "load-balancer" ?
    local.hana_cluster_vip_secondary_lb :
    local.hana_cluster_vip_secondary_route
  )

  ###################################################
  # DRBD
  # 2 is hardcoded for drbd because we always deploy 4 machines
  drbd_ip_start = 6
  drbd_ips = (
    length(var.drbd_ips) != 0 ?
    var.drbd_ips :
    [
      for ip_index in range(local.drbd_ip_start, local.drbd_ip_start + 2) :
      cidrhost(local.subnet_address_range, ip_index)
    ]
  )
  # Virtual IP addresses if a route is used. In this case the virtual ip address belongs to a different subnet than the machines
  drbd_cluster_vip_lb = (
    var.drbd_cluster_vip != "" ?
    var.drbd_cluster_vip :
    cidrhost(local.subnet_address_range, local.drbd_ip_start + 2)
  )

  drbd_cluster_vip_route = (
    var.drbd_cluster_vip != "" ?
    var.drbd_cluster_vip :
    cidrhost(cidrsubnet(local.subnet_address_range, -8, 0), 256 + local.drbd_ip_start + 2)
  )

  drbd_cluster_vip = (
    var.drbd_cluster_vip_mechanism == "load-balancer" ?
    local.drbd_cluster_vip_lb :
    local.drbd_cluster_vip_route
  )

  ###################################################
  # NETWEAVER
  # We need at least 2 virtual ips, if ASCS and PAS are in the same machine
  netweaver_virtual_ips_count = var.netweaver_ha_enabled ? max(local.netweaver_count, 3) : max(local.netweaver_count, 2)

  netweaver_ip_start = 30
  netweaver_ips = (
    length(var.netweaver_ips) != 0 ?
    var.netweaver_ips :
    [
      for ip_index in range(local.netweaver_ip_start, local.netweaver_ip_start + local.netweaver_count) :
      cidrhost(local.subnet_address_range, ip_index)
    ]
  )

  # same subnet as netweaver hosts
  netweaver_virtual_ips_lb_xscs = (
    length(var.netweaver_virtual_ips) != 0 ?
    var.netweaver_virtual_ips :
    [
      for ip_index in range(local.netweaver_ip_start, local.netweaver_ip_start + local.netweaver_xscs_server_count) :
      cidrhost(local.subnet_address_range, ip_index + 4)
    ]
  )

  # different subnet as netweaver hosts
  netweaver_virtual_ips_lb_app = (
    length(var.netweaver_virtual_ips) != 0 ?
    var.netweaver_virtual_ips :
    [
      for ip_index in range(local.netweaver_ip_start + local.netweaver_xscs_server_count, local.netweaver_ip_start + local.netweaver_xscs_server_count + var.netweaver_app_server_count) :
      cidrhost(cidrsubnet(local.subnet_address_range, -8, 0), 256 + ip_index + 4)
    ]
  )

  # different subnet as netweaver hosts
  netweaver_virtual_ips_route = (
    length(var.netweaver_virtual_ips) != 0 ?
    var.netweaver_virtual_ips :
    [
      for ip_index in range(local.netweaver_ip_start, local.netweaver_ip_start + local.netweaver_virtual_ips_count) :
      cidrhost(cidrsubnet(local.subnet_address_range, -8, 0), 256 + ip_index + 4)
    ]
  )
  netweaver_virtual_ips = (
    var.netweaver_cluster_vip_mechanism == "load-balancer" ?
    concat(local.netweaver_virtual_ips_lb_xscs, local.netweaver_virtual_ips_lb_app) :
    local.netweaver_virtual_ips_route
  )
}

